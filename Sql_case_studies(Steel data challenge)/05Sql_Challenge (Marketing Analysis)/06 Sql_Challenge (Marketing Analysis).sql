Date    : 10-May-2023

1. How many transactions were completed during each marketing campaign?



SELECT		M.campaign_name,
			COUNT(T.transaction_id) AS transaction_completed
FROM		transactions AS T
INNER JOIN	marketing_campaigns M
  ON		T.Product_id = M.Product_id
  AND		T.purchase_date BETWEEN M.start_date AND M.end_date
GROUP BY	M.campaign_name;


2. Which product had the highest sales quantity?


WITH cte_top AS (
SELECT	TOP 1
		product_id,
		SUM(quantity) AS total
FROM	transactions
GROUP BY product_id
ORDER BY 2 DESC)
SELECT	b.product_id,
		b.product_name,
		a.total AS highest_sales_quantity
FROM	cte_top a
LEFT JOIN sustainable_clothing b
  ON	a.product_id = b.product_id;

3. What is the total revenue generated from each marketing campaign?


SELECT		A.campaign_name,
			SUM(B.price * C.quantity) AS total_revenue_generated
FROM		marketing_campaigns A
INNER JOIN	sustainable_clothing B
  ON		A.product_id = B.product_id
INNER JOIN	transactions C
  ON		C.product_id = B.product_id
GROUP BY	A.campaign_name;



4. What is the top-selling product category based on the total revenue generated?

SELECT		TOP 1 B.category AS Top_selling_Product_category,
            SUM(B.price * C.quantity) AS total_revenue_generated
FROM		sustainable_clothing B
INNER JOIN	transactions C
  ON		C.product_id = B.product_id
GROUP BY	B.category
ORDER BY	2 DESC;


5. Which products had a higher quantity sold compared to the average quantity sold?

SELECT DISTINCT product_id,
                quantity
FROM			transactions
WHERE			quantity > (SELECT AVG(quantity) FROM transactions);


6. What is the average revenue generated per day during the marketing campaigns?

WITH cte_a AS (
SELECT
		T.Product_id,
		M.campaign_name,
		COUNT(T.transaction_id) AS frequency
FROM	transactions AS T
INNER JOIN marketing_campaigns M
  ON	T.Product_id = M.Product_id
  AND	T.purchase_date BETWEEN M.start_date AND M.end_date
GROUP BY T.Product_id,
         M.campaign_name),
cte_b AS (
SELECT
		C.product_id,
		SUM(A.quantity * B.price) AS total_revenue_generated
FROM	transactions A
INNER JOIN sustainable_clothing B
  ON	A.product_id = B.product_id
INNER JOIN marketing_campaigns C
  ON	C.product_id = A.product_id
  AND	A.purchase_date BETWEEN C.start_date AND C.end_date
GROUP BY c.product_id)
SELECT	A.campaign_name,
		(total_revenue_generated / frequency) AS Average_revenue_generated_per_campaign
FROM	cte_a A
INNER JOIN cte_b B
  ON	 A.product_id = B.product_id;


7. What is the percentage contribution of each product to the total revenue?

SELECT sc.product_id,
       sc.product_name,
       SUM(t.quantity * sc.price) AS revenue,
       (SUM(t.quantity * sc.price) / total_revenue.total) * 100 AS percentage_contribution
FROM	sustainable_clothing sc
JOIN	transactions t
  ON	sc.product_id = t.product_id
CROSS JOIN (SELECT SUM(quantity * price) AS total
			FROM	sustainable_clothing sc
			JOIN	transactions t
			ON		sc.product_id = t.product_id
			) AS total_revenue
GROUP BY sc.product_id,
         sc.product_name,
         total_revenue.total
ORDER BY revenue DESC;

8. Compare the average quantity sold during marketing campaigns to outside the marketing campaigns


WITH campaign_sales AS (
SELECT
		t.product_id,
		CASE
		WHEN t.product_id IN (SELECT product_id FROM marketing_campaigns) THEN 'During Campaigns'
			ELSE 'Outside Campaigns'
				END AS campaign,
		t.quantity
FROM	transactions t)
SELECT	campaign,
		AVG(quantity) AS average_quantity_sold
FROM	campaign_sales
GROUP BY campaign
ORDER BY campaign;



9. Compare the revenue generated by products inside the marketing campaigns to outside the campaigns

WITH campaign_revenue AS (
SELECT
		t.product_id,
		CASE
		WHEN t.product_id IN (SELECT product_id FROM marketing_campaigns) THEN 'During Campaigns'
			ELSE 'Outside Campaigns'
				END AS campaign,
		t.quantity * sc.price AS revenue
FROM	transactions t
JOIN	sustainable_clothing sc
  ON	t.product_id = sc.product_id)
SELECT	campaign,
		SUM(revenue) AS total_revenue
FROM	campaign_revenue
GROUP BY campaign
ORDER BY campaign;

10. Rank the products by their average daily quantity sold

WITH daily_quantity AS (
SELECT
		  product_id,
		  SUM(quantity) AS total_quantity,
		  COUNT(DISTINCT purchase_date) AS total_days,
		  SUM(quantity) / COUNT(DISTINCT purchase_date) AS average_daily_quantity
FROM		transactions
GROUP BY	product_id)
SELECT		product_id,
			average_daily_quantity,
			RANK() OVER (ORDER BY average_daily_quantity DESC) AS product_rank
FROM		daily_quantity
ORDER BY	product_rank;


--some valuable insights
  1) "Organic Cotton Sweater" product had sold maximum times.
  2) "Summer Sale" campaign was most sucessful among others which is amount of 639.92 dollars .This suggests that customers are responsive to seasonal discounts and promotions, indicating the potential for increased sales during specific periods.  "Super save" campaign sales was only 209.97 dollars, Marketing team should be work on this campaign like giving more discount to who buy products in large quantity. 
  3) Top selling Product category in sustainable clothing is "Bottoms" which has highest revenue generted of 1289.79 dollars.
  4) Recycled Polyester Jacket , Bamboo Yoga Leggings , Organic Cotton Sweater , Linen Jumpsuit , Recycled Denim Jeans these are the some top revenue sales generated products. 
  5) The Highest average revenue generated per day was "Summer Sale" campaign .
  6)  "Recycled Denim Jeans" product had highest percentage contribution of 13.70% to the total revenue & "Hemp Crop Top" product had lowest percentage contribution of 0.53% only.
  7) As per database , More revenue generated on outside campaings as compared to during campaigns. the reason could be only 3 products (Product_id 2,7 & 10) was kept in that campaigns. 
  
